//Scatterplot 
vc = {
	template: 'none',
	data: 'newScatterPlot-data',
	src: ["data"],
	props: [],
  lib: ['https://d3js.org/d3.v4.min.js', 'https://d3js.org/d3-scale-chromatic.v0.3.min.js'], 
	init: function(){
    
    this.size = this.config.size; 

    this.view.content = `<svg class = "scatterPlot" width ="${this.size.width}" height="${this.size.height}"></svg>`;

    let that = this;
 
    this.getQueryObject = require("#stdlib-query").getQueryObject; 

    this.svg = d3.select(this.view.element.querySelector("svg")).append("g").attr("class", "container");
    
     
        let w = 960;
        let h = 500;
        let margin = {top: 40, right: 60, bottom: 30, left: 60};

    this.update_size = (width, height) => {
      this.size.width = width > 0 ? width: this.config.size.width; 
      this.size.height = height > 0? height : this.config.size.height; 
      let svg = 
          d3.select(this.view.element.querySelector("svg"));
      svg.attr("width", this.size.width);
      svg.attr("height", this.size.height); 
    }; 


    //If there is no Data present render No data connected. 
      	this.draw_default = () => {
      let svg = d3.select(this.view.element.querySelector("svg"));
				//.attr("width", width)
			  //.attr("height", height); 
      
      svg.select(".container").remove();
      
			svg.append("g").attr("class", "container")
        .append("text")
      	.attr("x", 50)
      	.attr("y", 50)
        .attr("class", "noData").text("No is data connected");
    };
    
    
    this.draw = () => {
      //Loads csv (Asset)
      d3.csv("delays.csv", prepare, (data) => {
        //width,height,margins
        let dataset = data;
        let w = 960;
        let h = 500;
        let margin = {top: 40, right: 60, bottom: 30, left: 60};
        
        // colour & scale for regions
      let colours = d3.scaleOrdinal()
      .domain(["East London", "North London", "London", "South London", "West London"])
      .range(["#E01A25", "#2074A0", "#10A66E", "#66489F", "#EFB605"]);

      let xScale = d3.scaleLinear()
      .range([margin.left, w - margin.left - margin.right]);

      let yScale = d3.scaleLinear()
      .range([h - margin.bottom, margin.top]);

      let xAxis = d3.axisBottom()
      .scale(xScale)
      .tickFormat(d3.format(","))
      .tickSize(-(h - (margin.top+margin.bottom)))
      .ticks(10);

      let yAxis = d3.axisLeft()
      .scale(yScale)
      .tickFormat(d3.format(".0%"))
      .tickSize(-(w - (margin.left+margin.right)))
      .ticks(5);

      // xScale.domain([400, 40000])
     xScale.domain([0, d3.max(dataset, function(d) { return d.flights; })]);
      yScale.domain([0, d3.max(dataset, function(d) { return d.delay; })]);
        this.svg = d3.select(this.view.element.querySelector("svg"));
        
//         this.svg = d3.select("body")
//           .append("svg")
//           .attr("width", w)
//           .attr("height", h);

        this.svg.append("g")
          .attr("class", "axis")
          .attr("transform", "translate(0," + (h - margin.bottom) + ")")
          .call(xAxis);

        this.svg.append("g")
          .attr("class", "axis")
          .attr("transform", "translate(" + margin.left + ",0)")
          .call(yAxis);

        this.svg.selectAll("circle")
          .data(dataset)
          .enter()
          .append("circle")
          .attr("cx", function(d) { return xScale(d.flights); })
          .attr("cy", function(d) { return yScale(d.delay); })
          .attr("r", 3.5)
          .style("fill", function(d) { return colours(d.region); });

        this.svg.append("g")
          .append("text")
          .attr("class", "x title shadow")
          .attr("text-anchor", "end")
          .attr("transform", "translate(" + (w - margin.right - 5) + "," + (h - margin.bottom - 7) + ")")
          .text("x-axis title here");

        //enter titles: 
        
        this.svg.append("g")
          .append("text")
          .attr("class", "y title shadow")
          .attr("text-anchor", "end")
          .attr("transform", "translate(" + (margin.left+15) + "," + (margin.top+5) + ") rotate(-90)")
          .text("y-axis title here");

        // legend
        //May need new container: 
        let legendMargin = {top:12, right:5, bottom:10, left:5};
        let legendW = 200;
        let legendH = 200;
        
        let svgLegend = this.svg.append("svg")
        .attr("width", legendW)
        .attr("height", legendH)
        .attr("x", w - margin.right - legendW)
        .attr("y", margin.top);

       let legendContainer = svgLegend.append("g")
        .attr("class", "legendContainer")
        .attr("transform", "translate(" + legendMargin.left + "," + legendMargin.top + ")");

        let rectSize = 10;
        let rowHeight = 20;
        let maxWidth = 125;

        let legend = legendContainer.selectAll(".legendSquare")
        .data(colours.range())
        .enter()
        .append("g")
        .attr("class", "legendSquare")
        .attr("transform", function(d, i) {
          return "translate(0," + (i*rowHeight) + ")";
        });

        // append squares to legend
        legend.append("rect")
          .attr("width", rectSize)
          .attr("height", rectSize)
          .style("fill", function(d) { return d; });

        // append text to legend
        legend.append("text")
          .attr("transform", "translate(20," + rectSize/2 + ")")
          .attr("class", "legendText shadow")
          .attr("dy", ".35em")
          .text(function(d, i) { return colours.domain()[i]; }); 
        
      });
      
      function prepare(d) {
        
      d.code = d.airport_code;
      d.city = d.airport_city;
      d.region = d.region;
      d.flights = +d.flights;
      d.delay = +d.delayed_15min;
      return d;
    
     }     
    };
	},
	destroy: function() {

	},
	update: function(source) {
     if (!this.src.data) {
          this.draw();       
     }
			else{
        this.draw();
      }
	},
};

//Scatterplot-data: 
{
  "config": {
    "src": {},
    "view": "newScatterPlot-view",
    "size": {"width": 960,"height": 500},
    "margin":{"left":60,"right":60,"top":40,"bottom":30}
  },
  "data": {}
}
//CSS: 
#newScatterPlot-view {
  width: 960px;
  height: 500px;
  background-color: white;
}

#newScatterPlot-view .axis path, .axis line {
  fill: none;
  stroke: #dcdcdc;
  stroke-dasharray: 2, 2;
  shape-rendering: crispEdges;
}

#newScatterPlot-view .axis path, .axis line {
  fill: none;
  stroke: #dcdcdc;
  stroke-dasharray: 2, 2;
  shape-rendering: crispEdges;
}

#newScatterPlot-view.axis text {
  font-size: 10px;
  fill: #6b6b6b;
}

#newScatterPlot-view .title {
  font-size: 14px;
  fill: #6b6b6b;
}

#newScatterPlot-view .legendText {
  fill: #6b6b6b;
}

#newScatterPlot-view .shadow {
  text-shadow: 2px 2px 2px #fff, -2px -2px 2px #fff, -2px 2px 2px #fff, 2px -2px 2px #fff, -2px 0px 2px #fff, 2px 0px 2px #fff;
}

#newScatterPlot-view circle {
  fill-opacity: 0.55;
}

//Scatterplot-View: 
#scatterplot-view: 
